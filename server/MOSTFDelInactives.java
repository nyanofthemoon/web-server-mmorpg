import java.io.*;import javax.servlet.*;import javax.servlet.http.*;import java.lang.String;import java.util.Date;import java.util.StringTokenizer;import com.apple.mrj.MRJFileUtils;import com.apple.mrj.MRJOSType;public class MOSTFDelInactives extends HttpServlet {   public void doPost (HttpServletRequest delinactsreq, HttpServletResponse delinactsres) throws ServletException, IOException {File accountsdirs = new File("data/players");String autologs = "data/logs/Automated-Inactive-Deletion/";String[] accountslist = accountsdirs.list();String accountcheckarray[] = new String[ 40 ];String actdatearray[] = new String[ 5 ];String IncsNextLine;String actsdeleted = "";String chkact = "";int actsdeletednb = 0;int accountchecksize = 0;int totalaccounts = -1;int unregisteredacts = 0;Date delinacsndte = new Date();int delmon = delinacsndte.getMonth();int delday = delinacsndte.getDate();int delyear = delinacsndte.getYear();int delhour = delinacsndte.getHours();int delmin = delinacsndte.getMinutes();int delsec = delinacsndte.getSeconds();for (int fl = 0; fl < accountslist.length; fl++) {chkact = accountsdirs + "/" + accountslist[fl];try { BufferedReader chinacs = new BufferedReader(new FileReader(chkact));while ((IncsNextLine = chinacs.readLine()) != null && accountchecksize < 38) {accountcheckarray[accountchecksize] = IncsNextLine.toString();accountchecksize++; } chinacs.close();}catch ( IOException e ) { LogError( e.toString(), "MOSTFDelInactives-Read Player File"); return;}accountchecksize = 0;totalaccounts = totalaccounts + 1;if (accountcheckarray[2].equals("unregistered") || accountcheckarray[2].equals("beta")) {unregisteredacts = unregisteredacts + 1;StringTokenizer inactivesst = new StringTokenizer(accountcheckarray[3],"*",false);int inactivesstsize = 0;while (inactivesst.hasMoreTokens()) {actdatearray[inactivesstsize] = inactivesst.nextToken();inactivesstsize = inactivesstsize + 1;}if (Integer.parseInt(actdatearray[2]) < delyear) {/// deletion possibilityif (Integer.parseInt(actdatearray[1]) == 11 && Integer.parseInt(actdatearray[0]) > delday) { } else {// DELETEfor (int deln = 5; deln < 30; deln++) {if (accountcheckarray[deln].equals("-= Empty Character Slot =-")) {} else {String characterdel = "data/characters/" + accountcheckarray[deln];DeletePlayer( new File(characterdel) );boolean chkb = (new File(characterdel)).delete();}}boolean chk = (new File (chkact)).delete();actsdeleted = actsdeleted + "<br>" + chkact;actsdeletednb = actsdeletednb + 1;}} else if (Integer.parseInt(actdatearray[2]) == delyear) {/// deletion possibilityif (Integer.parseInt(actdatearray[1]) < delmon) {if (Integer.parseInt(actdatearray[0]) < delday) {// DELETEfor (int deln = 5; deln < 30; deln++) {if (accountcheckarray[deln].equals("-= Empty Character Slot =-")) {} else {String characterdel = "data/characters/" + accountcheckarray[deln];DeletePlayer( new File(characterdel) );boolean chkb = (new File(characterdel)).delete();}}boolean chk = (new File (chkact)).delete();actsdeleted = actsdeleted + "<br>" + chkact;actsdeletednb = actsdeletednb + 1;} else {}} else {}} else {//(Integer.parseInt(actdatearray[2]) > delyear)}} else {}} // END FORMRJFileUtils.setDefaultFileCreator(new MRJOSType("ttxt"));MRJFileUtils.setDefaultFileType(new MRJOSType("TEXT"));if (actsdeleted.equals("")) { actsdeleted = "No Accounts Were Found Inactive..."; } else {}ServletOutputStream inactivesout = delinactsres.getOutputStream();inactivesout.println("<html><head></head><body bgcolor=black text=red><font size=-2 face=Verdana><center><br>Unregistered Accounts / Total Accounts: " + unregisteredacts + " / <b>" + totalaccounts + "</b><br>Unregistered Accounts Deleted: " + actsdeletednb + " / <b>" + unregisteredacts + "</b><br><br>Deleted Accounts List:<br>" + actsdeleted + "</font></center></body></html>");inactivesout.close();autologs = autologs + delyear + "-" + delmon + "-" + delday + " at " + delhour + "H " + delmin + "M " + delsec + "S";PrintWriter autologslog = new PrintWriter( new FileWriter(autologs) );autologslog.println( "<html><head></head><body bgcolor=black text=red><font size=-2 face=Verdana><center><br>Unregistered Accounts / Total Accounts: " + unregisteredacts + " / <b>" + totalaccounts + "</b><br>Unregistered Accounts Deleted: " + actsdeletednb + " / <b>" + unregisteredacts + "</b><br><br>Deleted Accounts List:<br>" + actsdeleted + "</font></center></body></html>");autologslog.close();return;  }// Empty Player/Characters Classpublic boolean DeletePlayer( File plrdir ) throws IOException {boolean b = false;String array[] = plrdir.list();if ( array != null ) {for ( int count = 0; count < array.length; count ++ ) {String temp = array[ count ];File f1 = new File( plrdir, temp );if ( f1.isFile() ) {b = f1.delete();} else if ( f1.isDirectory() ) {b = this.DeletePlayer( f1 );b = f1.delete();}}} return b;}public void LogError( String plrerror, String myscrname ) throws IOException {String errorslog = "data/logs/Errors/";Date errosdte = new Date();int errmon = errosdte.getMonth();int errday = errosdte.getDate();int erryear = errosdte.getYear();int errhour = errosdte.getHours();int errmin = errosdte.getMinutes();int errsec = errosdte.getSeconds();errorslog = errorslog + erryear + "-" + errmon + "-" + errday + " at " + errhour + "H " + errmin + "M " + errsec + "S";PrintWriter errlogslog = new PrintWriter( new FileWriter(errorslog) );errlogslog.println( "<html><head></head><body bgcolor=black text=red><font size=-2 face=Verdana><center><br>Script Name: " + myscrname + "<br>Error: " + plrerror + "</font></center></body></html>");errlogslog.close();}// DoGet() Method Errorpublic void doGet(HttpServletRequest delinactsbreq, HttpServletResponse delinactsbres)throws IOException, ServletException{ delinactsbres.sendRedirect("http://localhost/inexistent.html"); return; }}