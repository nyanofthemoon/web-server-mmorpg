import java.io.*;import javax.servlet.*;import javax.servlet.http.*;import java.lang.String;import java.util.Date;public class MOGetCharactertInfos extends HttpServlet{   public void doPost(HttpServletRequest gcireq, HttpServletResponse gcires) throws ServletException, IOException{String readableCharacter = "";try {ObjectInputStream isservlet = new ObjectInputStream(gcireq.getInputStream());readableCharacter = (String)isservlet.readObject();isservlet.close();} catch (Exception rdreadableCharacter) {}if (readableCharacter.equals("null") || readableCharacter.equals("") || readableCharacter.equals("index.ssi")) { return; } else {}String rawreadableCharacterarray[] = new String[ 500 ];int rawreadableCharacterarraysize = 0;String readableCharacterFile = "data/characters/" + readableCharacter + "/";String nextLine;try { BufferedReader Statusfilebr = new BufferedReader(new FileReader(readableCharacterFile + "status")); 	while ((nextLine = Statusfilebr.readLine()) != null) {		rawreadableCharacterarray[rawreadableCharacterarraysize] = nextLine.toString();		rawreadableCharacterarraysize++;										                                    }    Statusfilebr.close();} catch ( Exception gcireadstatusfile ) { LogError( gcireadstatusfile.toString(), "MOGetCharacterInfos-Read Character Status File" ); return; }try { BufferedReader Statsfilebr = new BufferedReader(new FileReader(readableCharacterFile + "stats"));	while ((nextLine = Statsfilebr.readLine()) != null) {		rawreadableCharacterarray[rawreadableCharacterarraysize] = nextLine.toString();		rawreadableCharacterarraysize++;										                                    }    Statsfilebr.close();} catch ( Exception gcireadstatsfile ) { LogError( gcireadstatsfile.toString(), "MOGetCharacterInfos-Read Character Stats File" ); return; }try { BufferedReader Moneyfilebr = new BufferedReader(new FileReader(readableCharacterFile + "money"));	while ((nextLine = Moneyfilebr.readLine()) != null) {		rawreadableCharacterarray[rawreadableCharacterarraysize] = nextLine.toString();		rawreadableCharacterarraysize++;										                                    }    Moneyfilebr.close();} catch ( Exception gcireadmoneyfile ) { LogError( gcireadmoneyfile.toString(), "MOGetCharacterInfos-Read Character Money File" ); return; }try { BufferedReader Cochesfilebr = new BufferedReader(new FileReader(readableCharacterFile + "coches"));	while ((nextLine = Cochesfilebr.readLine()) != null) {		rawreadableCharacterarray[rawreadableCharacterarraysize] = nextLine.toString();		rawreadableCharacterarraysize++;										                                    }    Cochesfilebr.close();} catch ( Exception gcireadcochesfile ) { LogError( gcireadcochesfile.toString(), "MOGetCharacterInfos-Read Character Coches File" ); return; }try { BufferedReader mylocsfilebr = new BufferedReader(new FileReader("data/locations/" + rawreadableCharacterarray[12] + "/" + rawreadableCharacterarray[13] + "/" + rawreadableCharacterarray[14]));	while ((nextLine = mylocsfilebr.readLine()) != null) {		rawreadableCharacterarray[rawreadableCharacterarraysize] = nextLine.toString();		rawreadableCharacterarraysize++;										                                    }    mylocsfilebr.close();} catch ( Exception gcireadmlocsfile ) { LogError( gcireadmlocsfile.toString(), "MOGetCharacterInfos-Read Location File" ); return; }int sentInfosSize = 0;boolean sentInfosdone = false;try {//gcires.setContentType("application/octet-stream");gcires.setContentType("text/plain");OutputStream osss = gcires.getOutputStream();//ObjectOutputStream osss = new ObjectOutputStream(gcires.getOutputStream());while ( sentInfosdone == false ) {osss.write(("%" + rawreadableCharacterarray[sentInfosSize]).getBytes());//osss.writeObject("%" + rawreadableCharacterarray[sentInfosSize]);if (rawreadableCharacterarray[sentInfosSize].equals("null")) { sentInfosdone = true; } else { sentInfosSize = sentInfosSize + 1; }}osss.flush();osss.close();}catch (Exception Sending) { LogError( Sending.toString(), "MOGetCharacterInfos-Sending Character Infos" ); return; }                           return;}public void LogError( String plrerror, String myscrname ) throws IOException {String errorslog = "data/logs/Errors/";Date errosdte = new Date();int errmon = errosdte.getMonth();int errday = errosdte.getDate();int erryear = errosdte.getYear();int errhour = errosdte.getHours();int errmin = errosdte.getMinutes();int errsec = errosdte.getSeconds();errorslog = errorslog + erryear + "-" + errmon + "-" + errday + " at " + errhour + "H " + errmin + "M " + errsec + "S";PrintWriter errlogslog = new PrintWriter( new FileWriter(errorslog) );errlogslog.println( "<html><head></head><body bgcolor=black text=red><font size=-2 face=Verdana><center><br>Script Name: " + myscrname + "<br>Error: " + plrerror + "</font></center></body></html>");errlogslog.close();}// DoGet() Method Errorpublic void doGet(HttpServletRequest gcibreq, HttpServletResponse gcibres)throws IOException, ServletException{ gcibres.sendRedirect("http://localhost/inexistent.html"); return; }}