import java.io.*;import javax.servlet.*;import javax.servlet.http.*;import java.lang.String;import java.util.StringTokenizer;import java.util.Date;import com.apple.mrj.MRJFileUtils;import com.apple.mrj.MRJOSType;public class MOMessenger extends HttpServlet { public void doPost(HttpServletRequest hmsgreq, HttpServletResponse hmsgres) throws ServletException, IOException {String RawMessengerLegacy = "";try {ObjectInputStream momsgorm = new ObjectInputStream(hmsgreq.getInputStream());RawMessengerLegacy = (String)momsgorm.readObject();momsgorm.close();}catch (Exception MOMessngrExc) { return; }MRJFileUtils.setDefaultFileCreator(new MRJOSType("ttxt"));MRJFileUtils.setDefaultFileType(new MRJOSType("TEXT"));String Messengerresponse = "";int messengerarraysize = 0;String[] msgsrvtks = new String[10];StringTokenizer msgsrvtkss = new StringTokenizer(RawMessengerLegacy,"*",false);int msgsrvtkssize = 0;String[] MessagePriority = {"Critical", "Higest", "Higher", "High", "Urgent", "Normal", "Low", "Lower", "Lowest"};String[] DaysUntilArrival = {"0", "2", "4", "6", "8", "12", "16", "20", "24"};while (msgsrvtkss.hasMoreTokens()) {msgsrvtks[msgsrvtkssize] = msgsrvtkss.nextToken();msgsrvtkssize = msgsrvtkssize + 1; }Date newmsgtoday = new Date();int msghour = newmsgtoday.getHours();int msgmin = newmsgtoday.getMinutes();int msgsec = newmsgtoday.getSeconds();int msgmon = newmsgtoday.getMonth();int msgday = newmsgtoday.getDate();int msgyear = newmsgtoday.getYear();String newmessagefile = "data/characters/" + msgsrvtks[1] + "/messages/" + msgyear + msgday + msgmon + msghour + msgmin + msgsec;String msgrddatefile = "data/motime/" + msgmon + msgday + msgyear;String msgdatefilenextLine = "";String msgrddatefilearray[] = new String[ 6 ];int msgrddatefilearraysize = 0;try { BufferedReader msgdtefile = new BufferedReader(new FileReader(msgrddatefile));	while ((msgdatefilenextLine = msgdtefile.readLine()) != null) {		msgrddatefilearray[msgrddatefilearraysize] = msgdatefilenextLine.toString();		msgrddatefilearraysize++;}    msgdtefile.close();}catch ( IOException MsgRdMOTme ) { return; }int msgmtime = 12 * ( msghour * 3600 + msgmin * 60 + msgsec );int msgmtimeday = msgmtime / 3600;int msgmday = ( (msgmtimeday / 24) + Integer.parseInt(msgrddatefilearray[5]) ) + Integer.parseInt(DaysUntilArrival[Integer.parseInt(msgsrvtks[1])]);int msgahour = msgmtimeday % 24;int msgamin = (msgmtime % 3600) / 60;int msgayear = Integer.parseInt(msgrddatefilearray[0]);if (msgmday > 360) { msgayear = msgayear + 1; msgmday = msgmday - 360; } else {}if (msgsrvtks[0].equals("a")) {} else if (msgsrvtks[0].equals("b")) {} else {PrintWriter numsgsent = new PrintWriter( new FileWriter(newmessagefile) );numsgsent.println( msgayear + "&" + msgmday + "&" + msgahour + "&" + msgamin + "*" + msgsrvtks[4] + "*" + msgsrvtks[3] + "*" + MessagePriority[Integer.parseInt(msgsrvtks[1])] + "*no*0*" + msgsrvtks[5] + "*" + msgsrvtks[6] + "*u*" + msgsrvtks[7]);numsgsent.close();}try {hmsgres.setContentType("text/plain");OutputStream msgos = hmsgres.getOutputStream();msgos.write(Messengerresponse.getBytes());msgos.flush();msgos.close();}catch (Exception MessngResEr) { return; }                           return;}// DoGet() Method Errorpublic void doGet(HttpServletRequest hmsgb, HttpServletResponse hmsgbb)throws IOException, ServletException{ hmsgbb.sendRedirect("http://localhost/inexistent.html"); return; }}